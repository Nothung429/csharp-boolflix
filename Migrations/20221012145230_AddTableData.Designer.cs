// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace csharp_boolflix.Migrations
{
    [DbContext(typeof(NetflixContext))]
    [Migration("20221012145230_AddTableData")]
    partial class AddTableData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Actor", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Scarlett",
                            Nationality = "American",
                            Surname = "Johansson"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Elizabeth",
                            Nationality = "American",
                            Surname = "Olsen"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cate",
                            Nationality = "Australian",
                            Surname = "Blanchett"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("ActorTVSerie", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("TVSeriesId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "TVSeriesId");

                    b.HasIndex("TVSeriesId");

                    b.ToTable("ActorTVSerie");
                });

            modelBuilder.Entity("Characteristic", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Characteristics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pegi 13"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pegi 16"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pegi 18"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Violence"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sex"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Drugs"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Splatter"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Racism"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Children"
                        });
                });

            modelBuilder.Entity("CharacteristicMovie", b =>
                {
                    b.Property<int>("CharacteristicsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CharacteristicsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CharacteristicMovie");
                });

            modelBuilder.Entity("CharacteristicTVSerie", b =>
                {
                    b.Property<int>("CharacteristicsId")
                        .HasColumnType("int");

                    b.Property<int>("TVSeriesId")
                        .HasColumnType("int");

                    b.HasKey("CharacteristicsId", "TVSeriesId");

                    b.HasIndex("TVSeriesId");

                    b.ToTable("CharacteristicTVSerie");
                });

            modelBuilder.Entity("Episode", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TVSerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TVSerieId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 53,
                            SeasonNumber = 1
                        },
                        new
                        {
                            Id = 2,
                            Duration = 45,
                            SeasonNumber = 1
                        },
                        new
                        {
                            Id = 3,
                            Duration = 49,
                            SeasonNumber = 2
                        });
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Noir"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Love-Story"
                        });
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("GenreTVSerie", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("TVSeriesId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "TVSeriesId");

                    b.HasIndex("TVSeriesId");

                    b.ToTable("GenreTVSerie");
                });

            modelBuilder.Entity("Movie", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReleaseYaer")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ER MEJO",
                            Duration = 122,
                            Title = "LOTR 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "ER PIU MEJO",
                            Duration = 188,
                            Title = "LOTR 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "ER MEJO DER MEJO",
                            Duration = 244,
                            Title = "LOTR 3"
                        });
                });

            modelBuilder.Entity("TVSerie", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReleaseYaer")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Seasons")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TvSeries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Mamma pare che sono santo",
                            Seasons = 3,
                            Title = "Padre Maronno"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Winchester with a winchester",
                            Seasons = 15,
                            Title = "Supernatural"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tenet u' succ e mellone",
                            Seasons = 1,
                            Title = "Boris"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActorTVSerie", b =>
                {
                    b.HasOne("Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TVSerie", null)
                        .WithMany()
                        .HasForeignKey("TVSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacteristicMovie", b =>
                {
                    b.HasOne("Characteristic", null)
                        .WithMany()
                        .HasForeignKey("CharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacteristicTVSerie", b =>
                {
                    b.HasOne("Characteristic", null)
                        .WithMany()
                        .HasForeignKey("CharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TVSerie", null)
                        .WithMany()
                        .HasForeignKey("TVSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Episode", b =>
                {
                    b.HasOne("TVSerie", "TVSerie")
                        .WithMany("Episodes")
                        .HasForeignKey("TVSerieId");

                    b.Navigation("TVSerie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreTVSerie", b =>
                {
                    b.HasOne("Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TVSerie", null)
                        .WithMany()
                        .HasForeignKey("TVSeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TVSerie", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
